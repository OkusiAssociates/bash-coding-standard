#!/usr/bin/env bash
# {{DESCRIPTION}}
set -euo pipefail
shopt -s inherit_errexit shift_verbose

# Script metadata
declare -r VERSION='{{VERSION}}'
declare -r SCRIPT_PATH=$(realpath -e -- "$0")
declare -r SCRIPT_DIR=${SCRIPT_PATH%/*} SCRIPT_NAME=${SCRIPT_PATH##*/}

# Global variables
declare -i VERBOSE=1 DEBUG=0

# Colors
[[ -t 1 && -t 2 ]] && declare -r GREEN=$'\033[0;32m' YELLOW=$'\033[0;33m' RED=$'\033[0;31m' NC=$'\033[0m' || declare -r GREEN='' YELLOW='' RED='' NC=''
readonly -- GREEN YELLOW RED NC

# Messaging functions
_msg() {
  local -- prefix="$SCRIPT_NAME:" msg
  [[ "${FUNCNAME[1]}" == success ]] && prefix+=" ${GREEN}✓${NC}"
  [[ "${FUNCNAME[1]}" == warn ]] && prefix+=" ${YELLOW}⚠${NC}"
  [[ "${FUNCNAME[1]}" == error ]] && prefix+=" ${RED}✗${NC}"
  for msg in "$@"; do printf '%s %s\n' "$prefix" "$msg"; done
}

vecho() { ((VERBOSE)) || return 0; >&2 _msg "$@"; }
success() { ((VERBOSE)) || return 0; >&2 _msg "$@"; }
warn() { >&2 _msg "$@"; }
info() { ((VERBOSE)) || return 0; >&2 _msg "$@"; }
debug() { ((DEBUG)) || return 0; >&2 _msg "$@"; }
error() { >&2 _msg "$@"; }
die() { (($# > 1)) && error "${@:2}"; exit "${1:-0}"; }

yn() {
  #((PROMPT)) || return 0
  local -- REPLY
  >&2 read -r -n 1 -p "$(2>&1 warn "${1:-'Continue?'}") y/n "
  >&2 echo
  [[ ${REPLY,,} == y ]]
}

show_help() {
  cat <<EOF
Usage: $SCRIPT_NAME [OPTIONS]

{{DESCRIPTION}}

Options:
  -h, --help              Show this help message
  -V, --version           Show version information
  -v, --verbose           Enable verbose output (default)
  -q, --quiet             Disable verbose output
  -d, --debug             Enable debug output

Examples:
  $SCRIPT_NAME

EOF
}

main() {
  while (($#)); do
    case "$1" in
      -h|--help)
        show_help
        exit 0
        ;;
      -V|--version)
        echo "$SCRIPT_NAME $VERSION"
        exit 0
        ;;
      -v|--verbose)
        VERBOSE=1
        shift
        ;;
      -q|--quiet)
        VERBOSE=0
        shift
        ;;
      -d|--debug)
        DEBUG=1
        shift
        ;;
      -*)
        die 2 "Unknown option ${1@Q}" "Try '$SCRIPT_NAME --help' for usage information"
        ;;
      *)
        die 2 "Unexpected argument ${1@Q}" "Try '$SCRIPT_NAME --help' for usage information"
        ;;
    esac
  done

  # TODO: Add implementation
  info 'Hello from {{NAME}}'
  success 'Script completed successfully'
}

main "$@"
#fin
